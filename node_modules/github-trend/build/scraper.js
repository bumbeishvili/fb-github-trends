var request = require("request");
var cheerio = require("cheerio");
var yaml = require("js-yaml");
var RE_HREF_SCRAPE = /^\/([^\/]+)\/([^\/]+)$/;
var Scraper = (function () {
    function Scraper(config) {
        this.config = config || {};
        this.cache = null;
    }
    Scraper.prototype.fetchTrendPage = function (lang_name) {
        var opts = {
            url: "https://github.com/trending"
        };
        if (lang_name) {
            opts.url += "?l=" + lang_name;
        }
        if (this.config.proxy) {
            opts.proxy = this.config.proxy;
        }
        return new Promise(function (resolve, reject) {
            request(opts, function (err, res, body) {
                if (err) {
                    reject(err);
                    return;
                }
                if (res.statusCode !== 200) {
                    console.log("Invalid status: " + res.statusCode);
                    reject(new Error("Invalid status: " + res.statusCode));
                    return;
                }
                resolve(body);
            });
        });
    };
    Scraper.prototype.scrapeTrendingRepos = function (lang_name) {
        return this.fetchTrendPage(lang_name).then(function (html) {
            var dom = cheerio.load(html);
            return dom(".repo-list-item .repo-list-name a")
                .toArray()
                .map(function (a) {
                var href = a.attribs["href"];
                console.log(href);
                var match = href.match(RE_HREF_SCRAPE);
                if (!match) {
                    console.log("Invalid repo: " + href);
                }
                return {
                    owner: match[1],
                    name: match[2],
                };
            });
        });
    };
    Scraper.prototype.fetchLanguageYAML = function () {
        var _this = this;
        if (this.cache !== null) {
            return Promise.resolve(this.cache);
        }
        return new Promise(function (resolve, reject) {
            var opts = {
                url: "https://raw.githubusercontent.com/github/linguist/master/lib/linguist/languages.yml"
            };
            if (_this.config.proxy) {
                opts.proxy = _this.config.proxy;
            }
            request(opts, function (err, res, body) {
                if (err) {
                    reject(err);
                    return;
                }
                if (res.statusCode !== 200) {
                    console.log("Invalid status: " + res.statusCode);
                    reject(new Error("Invalid status: " + res.statusCode));
                    return;
                }
                var langs = yaml.safeLoad(body);
                _this.cache = langs;
                resolve(langs);
            });
        });
    };
    Scraper.prototype.scrapeLanguageColors = function () {
        return this.fetchLanguageYAML().then(function (langs) {
            var result = {};
            for (var name_1 in langs) {
                var lang = langs[name_1];
                if (!lang.color) {
                    continue;
                }
                result[name_1.toLowerCase()] = lang.color;
                if (lang.aliases !== undefined) {
                    for (var _i = 0, _a = lang.aliases; _i < _a.length; _i++) {
                        var alias = _a[_i];
                        result[alias.toLowerCase()] = lang.color;
                    }
                }
            }
            return result;
        });
    };
    Scraper.prototype.scrapeLanguageNames = function () {
        return this.fetchLanguageYAML().then(function (langs) {
            var result = [];
            for (var name_2 in langs) {
                result.push(name_2);
                var lang = langs[name_2];
                if (!lang.color) {
                    continue;
                }
                if (lang.aliases !== undefined) {
                    Array.prototype.push.apply(result, lang.aliases);
                }
            }
            return result;
        });
    };
    return Scraper;
})();
exports.default = Scraper;
//# sourceMappingURL=scraper.js.map